// server.js (CommonJS, Node 18)
// LINE + OpenAI + Google Sheets (Dynamic Loader) + Orders + Promotions + Fallback to LINE Group
const express = require("express");
const { middleware, Client } = require("@line/bot-sdk");
const bodyParser = require("body-parser");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const dayjs = require("dayjs");
const OpenAI = require("openai");

// ============ ENV ============
const {
  LINE_CHANNEL_ACCESS_TOKEN,
  LINE_CHANNEL_SECRET,
  OPENAI_API_KEY,
  GOOGLE_SHEET_ID,
  GOOGLE_APPLICATION_CREDENTIALS,
  LINE_GROUP_ID
} = process.env;

if (!LINE_CHANNEL_ACCESS_TOKEN || !LINE_CHANNEL_SECRET || !OPENAI_API_KEY || !GOOGLE_SHEET_ID) {
  console.error("‚ùå Missing required environment variables.");
}

const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

const lineConfig = {
  channelAccessToken: LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: LINE_CHANNEL_SECRET,
};

const client = new Client(lineConfig);
const app = express();
app.use(bodyParser.json());

// ============ GOOGLE SHEETS LOADER (Dynamic) ============
async function loadAllSheets() {
  // ‡πÉ‡∏ä‡πâ Service Account ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå (Render Secret Files)
  const creds = require(GOOGLE_APPLICATION_CREDENTIALS);
  const doc = new GoogleSpreadsheet(GOOGLE_SHEET_ID);
  await doc.useServiceAccountAuth({
    client_email: creds.client_email,
    private_key: creds.private_key,
  });
  await doc.loadInfo();

  const db = {}; // { SheetTitle: [ {col:value,...}, ... ] }
  const sheets = doc.sheetsByIndex;

  for (const sheet of sheets) {
    const rows = await sheet.getRows();
    if (!rows.length) {
      db[sheet.title] = [];
      continue;
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á (‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
    const headers = sheet.headerValues || Object.keys(rows[0] || {});
    const list = rows.map(r => {
      const obj = {};
      headers.forEach(h => { obj[h] = r.get?.(h) ?? r[h]; });
      return obj;
    });
    db[sheet.title] = list;
  }
  return { db, doc };
}

// ============ HELPERS ============
function parseNumber(x, fallback = 0) {
  const n = typeof x === "number" ? x : parseFloat(String(x || "").toString().replace(/[^\d.]/g, ""));
  return Number.isFinite(n) ? n : fallback;
}

function dateInRange(start, end, now = dayjs()) {
  const s = start ? dayjs(start) : null;
  const e = end ? dayjs(end) : null;
  if (s && now.isBefore(s, "day")) return false;
  if (e && now.isAfter(e, "day")) return false;
  return true;
}

function pickProfile(profileRows) {
  if (!profileRows || !profileRows.length) {
    return {
      pageName: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
      agentName: "‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô",
      selfPronoun: "‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô",
      customerCall: "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      tone: "‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏™‡∏±‡πâ‡∏ô-‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö",
      shipFee: 40,
      codFee: 20,
      unknownReply: "‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ä‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üòä"
    };
  }
  const p = profileRows[0];
  return {
    pageName: p["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à/‡∏£‡πâ‡∏≤‡∏ô"] || "‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
    agentName: p["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] || "‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô",
    selfPronoun: p["‡∏™‡∏£‡∏£‡∏û‡∏ô‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"] || "‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô",
    customerCall: p["‡∏Ñ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"] || "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
    tone: p["‡πÇ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö"] || "‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏™‡∏±‡πâ‡∏ô-‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö",
    shipFee: parseNumber(p["‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏õ‡∏Å‡∏ï‡∏¥"], 40),
    codFee: parseNumber(p["‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"], 20),
    unknownReply: p["‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ"] || "‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ä‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üòä"
  };
}

// ‡∏´‡∏≤ product ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠/alias/‡∏´‡∏°‡∏ß‡∏î
function matchProducts(products, text) {
  const t = (text || "").toLowerCase();
  const hits = [];
  for (const pr of products) {
    const name = String(pr["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] || "").toLowerCase();
    const code = String(pr["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] || "").toLowerCase();
    const cat  = String(pr["‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] || "").toLowerCase();
    const aliases = String(pr["‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å"] || "")
      .split(",").map(s=>s.trim().toLowerCase()).filter(Boolean);

    if (name && t.includes(name)) hits.push(pr);
    else if (code && t.includes(code)) hits.push(pr);
    else if (cat && t.includes(cat)) hits.push(pr);
    else if (aliases.some(a => a && t.includes(a))) hits.push(pr);
  }
  // unique ‡πÇ‡∏î‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const keyed = {};
  hits.forEach(x => keyed[x["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]] = x);
  return Object.values(keyed);
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏õ‡∏£ + ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢, ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏™‡∏´‡∏•‡∏±‡∏Å)
function computeTotals({ product, qty, promos, profile, subtotal }) {
  let discount = 0;
  let freeShip = false;
  let promoNotes = [];

  const now = dayjs();
  (promos || []).forEach(p => {
    const enabled = String(p["‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"] || "").toLowerCase() === "true" || p["‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"] === true;
    if (!enabled) return;
    if (!dateInRange(p["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"], p["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"], now)) return;

    // ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î / ‡∏´‡∏°‡∏ß‡∏î / ‡∏£‡∏´‡∏±‡∏™
    const scope = String(p["‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö"] || "").trim();
    let applies = false;
    if (!scope || scope === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") applies = true;
    else if (scope.startsWith("‡∏´‡∏°‡∏ß‡∏î=")) {
      const cat = (product["‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] || "").toString().trim();
      applies = cat && cat === scope.replace("‡∏´‡∏°‡∏ß‡∏î=","").trim();
    } else if (scope.startsWith("‡∏£‡∏´‡∏±‡∏™=")) {
      const list = scope.replace("‡∏£‡∏´‡∏±‡∏™=","").split(",").map(s=>s.trim());
      applies = list.includes(String(product["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] || "").trim());
    }

    if (!applies) return;

    const type = String(p["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£"] || "").trim();
    const v1 = parseNumber(p["‡∏Ñ‡πà‡∏≤1"], 0);
    const v2 = parseNumber(p["‡∏Ñ‡πà‡∏≤2"], 0);

    if (type === "BUY_X_GET_Y" && v1 > 0 && v2 >= 0) {
      const free = Math.floor(qty / (v1)) * v2;
      if (free > 0) {
        const price = parseNumber(product["‡∏£‡∏≤‡∏Ñ‡∏≤"], 0);
        discount += free * price;
        promoNotes.push(`‡πÇ‡∏õ‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ${v1} ‡πÅ‡∏ñ‡∏° ${v2} (‡πÅ‡∏ñ‡∏° ${free})`);
      }
    }

    if (type === "BUY_N_FREE_SHIP" && v1 > 0) {
      if (qty >= v1) {
        freeShip = true;
        promoNotes.push(`‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏ö ${v1} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ`);
      }
    }

    if (type === "PERCENT_OFF" && v1 > 0) {
      const d = Math.round((v1 / 100) * subtotal);
      discount += d;
      promoNotes.push(`‡∏•‡∏î ${v1}%`);
    }

    if (type === "AMOUNT_OFF" && v1 > 0) {
      discount += v1;
      promoNotes.push(`‡∏•‡∏î ${v1} ‡∏ö‡∏≤‡∏ó`);
    }

    if (type === "FREE_SHIP_OVER_AMOUNT" && v1 > 0) {
      if (subtotal >= v1) {
        freeShip = true;
        promoNotes.push(`‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö ${v1} ‡∏ö‡∏≤‡∏ó`);
      }
    }
  });

  let shipping = freeShip ? 0 : profile.shipFee;
  const total = Math.max(0, subtotal - discount) + shipping;

  return {
    discount,
    shipping,
    total,
    promoNotes
  };
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á system prompt ‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô Profile + ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏ó‡∏ô‡πÑ‡∏ó‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
function buildSystemPrompt(profile) {
  return `
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "${profile.pageName}" ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô "${profile.agentName}" ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡∏£‡∏û‡∏ô‡∏≤‡∏° "${profile.selfPronoun}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤ "${profile.customerCall}" ‡πÇ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö: ${profile.tone}.
‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô: "${profile.unknownReply}"
- ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠ 1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°/‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô/‡∏£‡∏™‡∏≠‡∏∞‡πÑ‡∏£/‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô)
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏£‡∏∏‡πà‡∏ô/‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏ä‡∏∑‡πà‡∏≠/‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà/‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô)
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥) ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡πâ‡∏ô‡πÜ
- ‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏π‡∏î‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 2‚Äì3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
`;
}

// ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
async function notifyAdminGroup(text) {
  try {
    if (!LINE_GROUP_ID) return;
    await client.pushMessage(LINE_GROUP_ID, { type: "text", text });
  } catch (e) { console.error("push to group error:", e.message); }
}

// ============ LINE WEBHOOK ============
app.post("/webhook", middleware(lineConfig), async (req, res) => {
  try {
    const results = await Promise.all(req.body.events.map(handleEvent));
    res.json(results);
  } catch (e) {
    console.error("Webhook error:", e);
    // ‡∏ï‡∏≠‡∏ö 200 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ LINE ‡πÄ‡∏™‡∏°‡∏≠ (‡∏Å‡∏±‡∏ô 302/4xx)
    res.status(200).end();
  }
});

async function handleEvent(event) {
  if (event.type !== "message" || event.message.type !== "text") return null;

  const userText = (event.message.text || "").trim();
  let reply = null;

  try {
    const { db, doc } = await loadAllSheets();
    const products = db["Products"] || db["‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] || [];
    const faqs     = db["FAQ"] || db["‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"] || [];
    const promos   = db["Promotions"] || db["‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"] || [];
    const profile  = pickProfile(db["Profile"] || db["‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"] || []);

    // 1) ‡∏à‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const matches = matchProducts(products, userText);

    // 2) ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‚Äú‡∏£‡∏≤‡∏Ñ‡∏≤‚Äù ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Üí ‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö
    const askPrice = /‡∏£‡∏≤‡∏Ñ‡∏≤|‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£|‡∏Å‡∏µ‡πà‡∏ö‡∏≤‡∏ó/.test(userText) && matches.length === 0;

    // 3) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏•‡∏≠‡∏á FAQ
    let faqAnswer = null;
    if (!matches.length) {
      for (const f of faqs) {
        const keywords = String(f["‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏Å"] || "").toLowerCase().split(",").map(s=>s.trim());
        if (keywords.some(k => k && userText.toLowerCase().includes(k))) {
          faqAnswer = f["‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"];
          break;
        }
      }
    }

    // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPT
    const ctx = {
      profile,
      buyer_text: userText,
      products_preview: products.slice(0, 50), // ‡∏Å‡∏±‡∏ô payload ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô
      promotions_preview: promos.slice(0, 50),
      faqs_preview: faqs.slice(0, 100)
    };

    // 5) ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏ï‡∏≠‡∏ö
    if (matches.length > 0) {
      // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ)
      const qtyMatch = userText.match(/(\d+)\s*(‡∏ä‡∏¥‡πâ‡∏ô|‡∏ñ‡∏∏‡∏á|‡∏Å‡∏£‡∏∞‡∏õ‡∏∏‡∏Å|‡∏ï‡∏±‡∏ß)?/);
      const qty = qtyMatch ? parseInt(qtyMatch[1], 10) : 1;
      const product = matches[0];
      const price = parseNumber(product["‡∏£‡∏≤‡∏Ñ‡∏≤"], 0);
      const subtotal = price * qty;
      const totals = computeTotals({ product, qty, promos, profile, subtotal });

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‚Äú‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥/‡∏£‡∏∏‡πà‡∏ô‚Äù ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const variant = product["‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥/‡∏£‡∏∏‡πà‡∏ô"] || "";
      const variantList = variant ? String(variant).split(",").map(s=>s.trim()).filter(Boolean) : [];

      let lines = [];
      lines.push(`üõí ${product["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]}`);
      lines.push(`üíµ ${price.toLocaleString()} ‡∏ö‡∏≤‡∏ó/‡∏ä‡∏¥‡πâ‡∏ô √ó ${qty}`);
      if (totals.promoNotes.length) lines.push(`üéÅ ‡πÇ‡∏õ‡∏£: ${totals.promoNotes.join(", ")}`);
      lines.push(`üöö ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á: ${totals.shipping.toLocaleString()} ‡∏ö‡∏≤‡∏ó`);
      lines.push(`‚úÖ ‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ${totals.total.toLocaleString()} ‡∏ö‡∏≤‡∏ó`);

      if (variantList.length) {
        lines.push(`\n‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${variantList.join(" / ")}`);
        lines.push(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥/‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö?`);
      } else {
        lines.push(`\n‡∏ñ‡πâ‡∏≤‡∏ï‡∏Å‡∏•‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞ (‡πÇ‡∏≠‡∏ô/‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á) ‡∏Ñ‡∏£‡∏±‡∏ö`);
      }
      reply = lines.join("\n");

    } else if (askPrice) {
      reply = `‡∏Ç‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏´‡πá‡∏î ‡∏ã‡∏≠‡∏á 80g‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏£‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‚Äù`;

    } else if (faqAnswer) {
      // FAQ ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô GPT (‡πÉ‡∏´‡πâ‡πÇ‡∏ó‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå)
      const system = buildSystemPrompt(profile);
      const prompt = `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${userText}". ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô FAQ: "${faqAnswer}". ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô-‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á 1‚Äì2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡πÑ‡∏ó‡∏¢ ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢.`;
      const resp = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: system },
          { role: "user", content: JSON.stringify(ctx) },
          { role: "user", content: prompt }
        ],
        temperature: 0.4,
        max_tokens: 120
      });
      reply = resp.choices[0].message.content.trim();

    } else {
      // ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏°‡∏±‡πà‡∏ß ‚Üí ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô + ‡∏ö‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ï‡∏≤‡∏°‡πÉ‡∏´‡πâ
      await notifyAdminGroup(`‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏° ‚Üí ${userText}\n(‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à, ‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö)`);
      reply = profile.unknownReply;
    }

  } catch (e) {
    console.error("handleEvent error:", e);
    reply = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ä‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôè";
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö LINE
  if (reply) {
    return client.replyMessage(event.replyToken, { type: "text", text: reply });
  } else {
    // ‡∏Å‡∏±‡∏ô LINE error: ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö 200 ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    return null;
  }
}

// Health check
app.get("/", (req, res) => res.send("OK"));
app.listen(process.env.PORT || 10000, () => console.log("Server running"));
