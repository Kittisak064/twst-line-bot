// =============================================================
// LINE Commerce RAG Bot ‚Äî Google Sheets + LINE + OpenAI
// Single-file production app.js (RAG-first, Strict, Thai)
// =============================================================

/*
‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö:
- Google Sheets: Products, Promotions, FAQ, Personality, Payment
- Retrieval (RAG): ‡∏Ñ‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡πÅ‡∏ö‡∏ö strict (‡πÑ‡∏°‡πà‡πÄ‡∏î‡∏≤ ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡πà‡∏á)
- NLP parser ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏Ç‡∏ô‡∏≤‡∏î/‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
- Session + Cart ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î
- Orders -> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏µ‡∏ó + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ADMIN_GROUP_ID
- Promotions ‡∏™‡∏£‡∏∏‡∏õ (‡πÅ‡∏ö‡∏ö rule-based ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô)
- ‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô OpenAI ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
- LINE Webhook + Signature Verify (raw body)
- Endpoints: /healthz /reload /debug
- Error handling + logging + null guard ‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
*/

// ------------------ Imports ------------------
import express from "express";
import bodyParser from "body-parser";
import crypto from "crypto";
import { google } from "googleapis";
import fetch from "node-fetch";
import OpenAI from "openai";

// ------------------ Env ------------------
const {
  GOOGLE_CLIENT_EMAIL,
  GOOGLE_PRIVATE_KEY,
  GOOGLE_SHEET_ID,
  LINE_CHANNEL_ACCESS_TOKEN,
  LINE_CHANNEL_SECRET,
  OPENAI_API_KEY,
  ADMIN_GROUP_ID,
  PORT
} = process.env;

if (!GOOGLE_CLIENT_EMAIL || !GOOGLE_PRIVATE_KEY || !GOOGLE_SHEET_ID ||
    !LINE_CHANNEL_ACCESS_TOKEN || !LINE_CHANNEL_SECRET || !OPENAI_API_KEY) {
  console.error("[BOOT] Missing required environment variables.");
  console.error("Required:", [
    "GOOGLE_CLIENT_EMAIL","GOOGLE_PRIVATE_KEY","GOOGLE_SHEET_ID",
    "LINE_CHANNEL_ACCESS_TOKEN","LINE_CHANNEL_SECRET","OPENAI_API_KEY"
  ].join(", "));
  // ‡πÑ‡∏°‡πà throw ‡πÉ‡∏´‡πâ Render ‡∏£‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π healthz ‡πÑ‡∏î‡πâ
}

const GOOGLE_PRIVATE_KEY_FIX = GOOGLE_PRIVATE_KEY?.replace(/\\n/g, "\n");

// ------------------ Google Sheets ------------------
const sheets = google.sheets("v4");
const auth = new google.auth.JWT(
  GOOGLE_CLIENT_EMAIL,
  null,
  GOOGLE_PRIVATE_KEY_FIX,
  ["https://www.googleapis.com/auth/spreadsheets"]
);

// ------------------ OpenAI ------------------
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// ------------------ Cache ------------------
const cache = {
  products: [],
  promotions: [],
  faq: [],
  personality: null,
  payment: [],
  lastLoadedAt: 0
};

// ------------------ Utils ------------------
const log = (...a) => console.log("[BOT]", ...a);
const nowISO = () => new Date().toISOString();
const shortId = () => Math.random().toString(36).slice(2, 10);
const priceTHB = (n) => `${Number(n||0).toLocaleString("th-TH")} ‡∏ö‡∏≤‡∏ó`;

// ------------------ Personality helpers ------------------
const staffPrefix = () => cache.personality?.gender === "‡∏´‡∏ç‡∏¥‡∏á" ? "‡∏Ñ‡πà‡∏∞" : "‡∏Ñ‡∏£‡∏±‡∏ö";
const customerName = () => cache.personality?.customerName || "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
const staffName = () => cache.personality?.staffName || "‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô";
const pageName = () => cache.personality?.pageName || "‡πÄ‡∏û‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤";
const dontKnow = () => cache.personality?.dontKnow || "‡∏Ç‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞";

// ------------------ Load Sheets ------------------
async function loadSheet(range) {
  const res = await sheets.spreadsheets.values.get({
    auth, spreadsheetId: GOOGLE_SHEET_ID, range
  });
  return res.data.values || [];
}

function splitList(s) {
  if (!s) return [];
  return String(s).split(",").map(t => t.trim()).filter(Boolean);
}

async function ensureDataLoaded(force=false) {
  if (!force && Date.now()-cache.lastLoadedAt < 5*60*1000) return;
  log("Reloading sheets data‚Ä¶");
  const [prod, promos, faq, persona, pay] = await Promise.all([
    loadSheet("Products!A2:G"),
    loadSheet("Promotions!A2:F"),
    loadSheet("FAQ!A2:C"),
    loadSheet("Personality!A2:G"),
    loadSheet("Payment!A2:C")
  ]);

  cache.products = prod
    .filter(r => r && r[0]) // ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™
    .map(r => ({
      code: r[0], name: r[1] || "", category: r[2] || "",
      price: Number(r[3]||0),
      aliases: splitList(r[4]),
      options: splitList(r[5]),
      sizes: splitList(r[6])
    }));

  cache.promotions = promos
    .filter(r => r && (r[0]||r[1]||r[2]))
    .map(r => ({
      code: r[0] || "", detail: r[1] || "",
      type: (r[2]||"").toLowerCase(), condition: r[3] || "",
      products: splitList(r[4]), categories: splitList(r[5])
    }));

  cache.faq = faq
    .filter(r => r && (r[1]||r[2]))
    .map(r => ({ q: r[0]||"", keyword: r[1]||"", a: r[2]||"" }));

  if (persona && persona.length) {
    const p = persona[0];
    cache.personality = {
      staffName: p[0] || "‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô",
      pageName: p[1] || "‡πÄ‡∏û‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
      persona: p[2] || "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á",
      customerName: p[3] || "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      adminSelf: p[4] || "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
      dontKnow: p[5] || "‡∏Ç‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞",
      gender: p[6] || "‡∏´‡∏ç‡∏¥‡∏á"
    };
  }

  cache.payment = pay
    .filter(r => r && (r[0]||r[1]||r[2]))
    .map(r => ({ category: r[0]||"", method: r[1]||"", detail: r[2]||"" }));

  cache.lastLoadedAt = Date.now();
  log("Sheets reloaded");
}

// ------------------ LINE API ------------------
async function lineReply(replyToken, messages) {
  const url = "https://api.line.me/v2/bot/message/reply";
  const res = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type":"application/json",
      Authorization:`Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
    },
    body: JSON.stringify({ replyToken, messages })
  });
  if (!res.ok) log("LINE reply error", res.status, await res.text());
}

async function linePush(to, messages) {
  const url = "https://api.line.me/v2/bot/message/push";
  const res = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type":"application/json",
      Authorization:`Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
    },
    body: JSON.stringify({ to, messages })
  });
  if (!res.ok) log("LINE push error", res.status, await res.text());
}

const makeReply = (text, quick=[]) => {
  const msg = { type:"text", text: String(text||"") };
  if (quick.length) {
    msg.quickReply = {
      items: quick.map(label => ({
        type:"action",
        action: { type:"message", label, text: label }
      }))
    };
  }
  return msg;
};

function verifySignature(signature, bodyBuffer) {
  const h = crypto.createHmac("SHA256", LINE_CHANNEL_SECRET)
                  .update(bodyBuffer)
                  .digest("base64");
  return signature === h;
}

// ------------------ NLP / Retrieval ------------------
const normalize = (s="") => String(s).trim().toLowerCase().replace(/\s+/g," ");

function parseQuantity(text) {
  const t = normalize(text);
  const m = t.match(/(\d+)\s*(‡∏ä‡∏¥‡πâ‡∏ô|‡∏Å‡∏£‡∏∞‡∏õ‡∏∏‡∏Å|‡∏Å‡∏•‡πà‡∏≠‡∏á|‡∏Ñ‡∏±‡∏ô|‡∏Ç‡∏ß‡∏î|‡∏Å‡∏¥‡πÇ‡∏•|‡πÅ‡∏û‡πá‡∏Ñ)?/);
  if (m) return Math.max(1, parseInt(m[1],10));
  const map = { "‡∏´‡∏ô‡∏∂‡πà‡∏á":1,"‡∏™‡∏≠‡∏á":2,"‡∏™‡∏≤‡∏°":3,"‡∏™‡∏µ‡πà":4,"‡∏´‡πâ‡∏≤":5,"‡∏´‡∏Å":6,"‡πÄ‡∏à‡πá‡∏î":7,"‡πÅ‡∏õ‡∏î":8,"‡πÄ‡∏Å‡πâ‡∏≤":9,"‡∏™‡∏¥‡∏ö":10 };
  for (const [k,v] of Object.entries(map)) if (t.includes(k)) return v;
  return 1;
}

function parseSize(text) {
  const m = text.match(/(\d+\s?(g|‡∏Å‡∏£‡∏±‡∏°|ml|‡∏•‡∏¥‡∏ï‡∏£|ah|‡∏Å‡∏Å))/i);
  return m ? m[1].replace(/\s+/g,"").toLowerCase() : "";
}

function detectCategory(text) {
  const t = normalize(text);
  if (t.includes("‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å")) return "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å";
  if (t.includes("‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô")) return "‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î";
  return "";
}

// Retrieval (RAG) ‚Äî ‡∏Ñ‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
function retrieveProductsByCategory(category) {
  return cache.products.filter(p => normalize(p.category) === normalize(category));
}

function retrieveProductCandidates(text) {
  const low = normalize(text);
  // ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢ alias + partial name
  return cache.products.filter(p =>
    normalize(p.name).includes(low) ||
    p.aliases.some(a => normalize(a).includes(low))
  );
}

function retrieveFAQ(text) {
  const low = normalize(text);
  return cache.faq.find(f => f.keyword && low.includes(normalize(f.keyword)));
}

// ------------------ Cart / Session ------------------
const sessions = {}; // in-memory (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Redis/DB ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)

function getSession(uid) {
  if (!sessions[uid]) sessions[uid] = { userId: uid, stage:"", cart:[], note:"" };
  return sessions[uid];
}

function addToCart(session, product, qty=1, option="", size="") {
  if (!product) return;
  const found = session.cart.find(c => c.code===product.code && c.option===option && c.size===size);
  if (found) found.qty += qty;
  else session.cart.push({
    code: product.code, name: product.name, option, size, qty,
    price: Number(product.price||0), category: product.category
  });
}

function cartTotal(session) {
  return (session.cart||[]).reduce((s,c)=> s + (c.price*c.qty), 0);
}

function cartSummary(session) {
  if (!session.cart || !session.cart.length) return `‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà${staffPrefix()} üõí`;
  const lines = session.cart.map(c =>
    `‚Ä¢ ${c.name}${c.option?` (${c.option})`:""}${c.size?` ${c.size}`:""} x${c.qty} = ${priceTHB(c.price*c.qty)}`
  );
  return `‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ñ‡πà‡∏∞:\n${lines.join("\n")}\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${priceTHB(cartTotal(session))}`;
}

// ------------------ Promotions (rule-based ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô) ------------------
function applyPromotions(session) {
  const promos = [];
  if (!session.cart?.length) return promos;

  for (const promo of cache.promotions) {
    const type = promo.type || "";
    if (type === "discount") {
      // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô promo.categories
      const match = session.cart.some(c => promo.categories.includes(c.category));
      if (match) promos.push(promo.detail);
    } else if (type === "buyxgety") {
      const match = session.cart.some(c => promo.categories.includes(c.category));
      if (match) promos.push(promo.detail);
    }
  }
  return promos;
}
const promotionSummary = (session) => {
  const p = applyPromotions(session);
  return p.length ? `‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n${p.map(x=>"‚Ä¢ "+x).join("\n")}` : "";
};

// ------------------ Orders + Logs + Payment + Admin notify ------------------
async function saveOrder(userId, session, nameAddr="", phone="") {
  const orderId = "ORD-"+shortId();
  const rows = (session.cart||[]).map(c => [
    orderId, c.code, c.name, c.option, c.qty, c.price*c.qty,
    promotionSummary(session), nameAddr, phone, "‡πÉ‡∏´‡∏°‡πà"
  ]);
  if (!rows.length) return orderId;

  try {
    await sheets.spreadsheets.values.append({
      auth, spreadsheetId: GOOGLE_SHEET_ID,
      range: `Orders!A:J`, valueInputOption: "RAW",
      requestBody: { values: rows }
    });
  } catch (e) { log("saveOrder error:", e.message); }
  return orderId;
}

async function logEvent(userId, type, text) {
  try {
    await sheets.spreadsheets.values.append({
      auth, spreadsheetId: GOOGLE_SHEET_ID,
      range:`Logs!A:D`, valueInputOption:"RAW",
      requestBody: { values: [[nowISO(), userId, type, String(text||"")]] }
    });
  } catch(e) { log("logEvent error:", e.message); }
}

const paymentReply = () => {
  const lines = cache.payment.map(p=>`‚Ä¢ ${p.category}: ${p.method} (${p.detail})`);
  return lines.length ? `‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏∞:\n${lines.join("\n")}` : "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏Ñ‡πà‡∏∞";
};

async function notifyAdmin(orderId, session) {
  if (!ADMIN_GROUP_ID) return;
  const lines = (session.cart||[]).map(c =>
    `‚Ä¢ ${c.name}${c.size?" "+c.size:""} x${c.qty} = ${priceTHB(c.price*c.qty)}`
  );
  const total = cartTotal(session);
  const promo = promotionSummary(session);
  await linePush(ADMIN_GROUP_ID, [
    { type:"text", text: `üõí ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà ${orderId}`},
    { type:"text", text: `${lines.join("\n")}\n‡∏£‡∏ß‡∏° ${priceTHB(total)}${promo?`\n${promo}`:""}` }
  ]);
}

// ------------------ Listing helpers (RAG listing) ------------------
function listByCategory(category, limit=6) {
  const items = retrieveProductsByCategory(category);
  if (!items.length) return `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${category} ${staffPrefix()}`;
  const lines = items.slice(0, limit).map(p =>
    `‚Ä¢ ${p.name}${p.sizes.length?` (${p.sizes.join("/")})`:""} ‚Äî ${priceTHB(p.price)}`
  );
  return `${category}‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏∞:\n${lines.join("\n")}${items.length>limit?`\n...‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏µ‡∏Å ‡∏™‡∏ô‡πÉ‡∏à‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°${staffPrefix()}?`:""}`;
}

// ------------------ Intent detection + FAQ strict ------------------
function matchFAQStrict(text) {
  const f = retrieveFAQ(text);
  return f ? f.a : null;
}

function detectIntent(text) {
  const low = normalize(text);
  // FAQ ‡∏Å‡πà‡∏≠‡∏ô
  const fa = matchFAQStrict(text);
  if (fa) return { type:"faq", answer: fa };

  if (/(‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|hello|hi|‡πÄ‡∏Æ‡∏•‡πÇ‡∏•)/.test(low)) return { type:"greet" };
  if (/(‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£|‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£|‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∏‡∏¢|‡πÉ‡∏Ñ‡∏£‡∏ï‡∏≠‡∏ö)/.test(low)) return { type:"ask_name" };
  if (/(‡πÄ‡∏û‡∏à‡∏≠‡∏∞‡πÑ‡∏£|‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£|‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏à‡∏≠‡∏∞‡πÑ‡∏£|‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à)/.test(low)) return { type:"ask_page" };
  if (/(‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå|checkout|‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô|‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô)/.test(low)) return { type:"checkout" };

  // add_to_cart ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á "‡πÄ‡∏≠‡∏≤, ‡∏™‡∏±‡πà‡∏á, ‡∏£‡∏±‡∏ö, ‡πÉ‡∏™‡πà"
  if (/(‡πÄ‡∏≠‡∏≤|‡∏™‡∏±‡πà‡∏á|‡πÉ‡∏™‡πà|‡∏£‡∏±‡∏ö|‡πÄ‡∏û‡∏¥‡πà‡∏°)/.test(low)) return { type:"add_to_cart" };

  // browse category
  if (low.includes("‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å")) return { type:"browse", category:"‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å" };
  if (low.includes("‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô")) return { type:"browse", category:"‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î" };

  return { type:"unknown" };
}

// ------------------ OpenAI Rewriter (STRICT, RAG-only) ------------------
async function rewriteWithAI(structuredMsg, ragContext="") {
  // structuredMsg = ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  // ragContext = ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö FAQ/‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡πà‡∏≤‡∏¢)
  try {
    const persona = cache.personality?.persona || "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á";
    const staff = staffName();
    const page = pageName();
    const cName = customerName();

    const system = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ "${staff}" ‡∏à‡∏≤‡∏Å "${page}" ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: ${persona}
‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠):
- ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô "‡∏ö‡∏£‡∏¥‡∏ö‡∏ó (RAG Context)" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö"
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥/‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤/‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á
- ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á "‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô" ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏ä‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
- ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
- ‡∏ñ‡πâ‡∏≤ structuredMsg ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏Å‡∏ß‡∏° ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ô‡∏ß‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î (‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å/‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô) ‡πÅ‡∏ó‡∏ô
`;

    const user = `
[RAG Context ‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó]
${ragContext || "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)"}

[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏î‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)]
${structuredMsg}
    `.trim();

    const resp = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0.4,
      max_tokens: 220,
      messages: [
        { role:"system", content: system },
        { role:"user", content: user }
      ]
    });

    const out = (resp.choices?.[0]?.message?.content || structuredMsg).trim();
    return out;
  } catch (e) {
    log("rewriteWithAI error:", e.message);
    return structuredMsg;
  }
}

// ------------------ Conversation Handler (RAG-first) ------------------
async function handleMessage(userId, replyToken, text) {
  await ensureDataLoaded();
  const session = getSession(userId);
  await logEvent(userId, "in", text);

  const intent = detectIntent(text);
  log("intent:", intent);

  let structured = "";     // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó (‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  let ragContext = "";     // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡πÄ‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
  let quick = [];

  switch (intent.type) {
    case "greet": {
      structured = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ${staffPrefix()} ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô${staffName()}‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à ${pageName()} ‡∏™‡∏ô‡πÉ‡∏à‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏´‡∏ô ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î`;
      quick = ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
      break;
    }
    case "ask_name": {
      structured = `‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${staffName()} ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à ${pageName()}`;
      break;
    }
    case "ask_page": {
      structured = `‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Ñ‡∏∑‡∏≠ "${pageName()}"`;
      break;
    }
    case "faq": {
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡∏ï‡∏£‡∏á ‡πÜ
      structured = intent.answer;
      break;
    }
    case "browse": {
      session.stage = intent.category;
      const items = retrieveProductsByCategory(intent.category);
      if (items.length) {
        ragContext = items.map(p => `${p.name}${p.sizes.length?` (${p.sizes.join("/")})`:""} = ${priceTHB(p.price)}`).join("\n");
        structured = `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${intent.category} (‡∏î‡∏π‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó)`;
        quick = items.slice(0,3).map(p=>p.name).concat(["‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"]);
      } else {
        structured = `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${intent.category}`;
      }
      break;
    }
    case "add_to_cart": {
      // 1) ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      const qty = parseQuantity(text);
      const size = parseSize(text);
      // ‡∏´‡∏≤ candidate ‡πÇ‡∏î‡∏¢ keyword ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô
      let candidates = retrieveProductCandidates(text);

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ candidate: ‡πÉ‡∏ä‡πâ stage ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏°‡∏ß‡∏î‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å)
      if (!candidates.length && session.stage) {
        candidates = retrieveProductsByCategory(session.stage);
      }

      if (candidates.length) {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏ó‡∏≥ disambiguation ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ)
        const p = candidates[0];
        const finalSize = size || (p.sizes[0] || "");
        addToCart(session, p, qty, "", finalSize);
        structured = `‡πÄ‡∏û‡∏¥‡πà‡∏° ${p.name}${finalSize?` ${finalSize}`:""} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${qty} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`;
        ragContext = `${p.name}${finalSize?` ${finalSize}`:""} = ${priceTHB(p.price)}`;
        quick = ["‡∏î‡∏π‡πÇ‡∏õ‡∏£","‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"];
      } else {
        // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‚Üí ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ó‡∏ô
        structured = `${dontKnow()} ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ 2 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠ ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞ ‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î`;
        quick = ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
      }
      break;
    }
    case "checkout": {
      // ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ + ‡πÇ‡∏õ‡∏£ + ‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡πà‡∏≤‡∏¢
      const itemsLines = (session.cart||[]).map(c =>
        `${c.name}${c.size?` ${c.size}`:""} x${c.qty} = ${priceTHB(c.price*c.qty)}`
      ).join("\n");
      const total = priceTHB(cartTotal(session));
      const promos = promotionSummary(session);
      const payments = paymentReply();

      ragContext = [
        itemsLines ? `‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤:\n${itemsLines}\n‡∏£‡∏ß‡∏°: ${total}` : "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á",
        promos || "",
        payments || ""
      ].filter(Boolean).join("\n\n");

      structured = `‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏π‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô`;
      quick = ["‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
      break;
    }
    case "unknown":
    default: {
      // ‡∏•‡∏≠‡∏á‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      const cat = detectCategory(text);
      if (cat) {
        session.stage = cat;
        const items = retrieveProductsByCategory(cat);
        if (items.length) {
          ragContext = items.map(p => `${p.name}${p.sizes.length?` (${p.sizes.join("/")})`:""} = ${priceTHB(p.price)}`).join("\n");
          structured = `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${cat} (‡∏î‡∏π‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó)`;
          quick = items.slice(0,3).map(p=>p.name).concat(["‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"]);
        } else {
          structured = `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${cat}`;
        }
      } else {
        structured = `${dontKnow()} ‡∏™‡∏ô‡πÉ‡∏à‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏´‡∏ô ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î`;
        quick = ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
      }
      break;
    }
  }

  if (!structured) {
    structured = `${dontKnow()} ‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞`;
    quick = ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
  }

  const finalText = await rewriteWithAI(structured, ragContext);
  await lineReply(replyToken, [makeReply(finalText, quick)]);
  await logEvent(userId, "out", finalText);
}

// ------------------ Express App / Webhook ------------------
const app = express();

// ‡πÉ‡∏ä‡πâ raw body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö /webhook (verify signature)
app.use("/webhook", bodyParser.raw({ type:"*/*" }));
app.use(bodyParser.json());

// healthz
app.get("/healthz", (req,res)=> res.json({ ok:true, ts: Date.now() }));

// reload cache
app.post("/reload", async (req,res) => {
  try {
    await ensureDataLoaded(true);
    res.json({ reloadedAt: cache.lastLoadedAt, staff: cache.personality?.staffName });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// debug (‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
app.get("/debug", async (req,res) => {
  try {
    await ensureDataLoaded();
    res.json({
      productsSample: cache.products.slice(0,5),
      promotionsSample: cache.promotions.slice(0,3),
      faqSample: cache.faq.slice(0,3),
      personality: cache.personality,
      payment: cache.payment
    });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// webhook
app.post("/webhook", async (req,res) => {
  const signature = req.headers["x-line-signature"];
  if (!verifySignature(signature, req.body)) {
    return res.status(400).send("Invalid signature");
  }
  const body = JSON.parse(req.body.toString("utf8"));
  res.sendStatus(200);

  for (const ev of (body.events||[])) {
    try {
      if (ev.type==="message" && ev.message?.type==="text") {
        const uid = ev.source?.userId || "unknown";
        await handleMessage(uid, ev.replyToken, ev.message.text || "");
      } else {
        // ‡∏ï‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
        await lineReply(ev.replyToken, [makeReply(`‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£${staffPrefix()} üôè` , ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô","‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"])]);
      }
    } catch (e) {
      log("event error:", e.message);
      try {
        await lineReply(ev.replyToken, [makeReply(`${dontKnow()} ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢${staffPrefix()}`, ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"])]);
      } catch {}
    }
  }
});

// boot
const port = PORT || 3000;
app.listen(port, async () => {
  log(`üöÄ Server running on port ${port}`);
  try { await ensureDataLoaded(true); } catch(e) { log("initial load error:", e.message); }
});
