// =============================================================
// LINE Commerce Sales Bot ‚Äî Single File app.js
// Google Sheets (RAG) + LINE Messaging API + OpenAI (tone only)
// Author: Dev Assistant
// =============================================================
//
//  ‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏Ñ‡πâ‡∏î:
//  1) Imports & Env
//  2) Google Sheets / OpenAI / Cache
//  3) Helpers (format, NLP, validation)
//  4) Retrieval (RAG): products/promotions/faq from sheets
//  5) Session Memory (in-RAM + persist to Google Sheets: Sessions/Logs)
//  6) Sales Flow State Machine (WELCOME ‚Üí BROWSING ‚Üí CART ‚Üí DETAILS ‚Üí CONFIRM)
//  7) Promotion engine (rule-based)
//  8) Order saving + Admin notify
//  9) LINE API (verify/reply/push) + OpenAI rewrite (STRICT, tone only)
// 10) Intent detection + Handlers per state
// 11) Express endpoints (/webhook /healthz /reload /debug)
// 12) Bootstrap
//
//  NOTE:
//  - ‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äú‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‚Äù (RAG). GPT ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‚Äú‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô‚Äù ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
//  - FAQ/Checkout/Address ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‚Äú‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GPT‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô‡∏°‡∏±‡πà‡∏ß
//  - ‡πÄ‡∏Å‡πá‡∏ö memory: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 turn ‡∏ï‡πà‡∏≠ user, stage, cart, lastCategory
//  - Persist: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Sessions/Logs/Orders ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
// =============================================================


// =============================================================
// 1) Imports & Env
// =============================================================
import express from "express";
import bodyParser from "body-parser";
import crypto from "crypto";
import { google } from "googleapis";
import fetch from "node-fetch";
import OpenAI from "openai";

const {
  GOOGLE_CLIENT_EMAIL,
  GOOGLE_PRIVATE_KEY,
  GOOGLE_SHEET_ID,
  LINE_CHANNEL_ACCESS_TOKEN,
  LINE_CHANNEL_SECRET,
  OPENAI_API_KEY,
  ADMIN_GROUP_ID,
  PORT
} = process.env;

if (!GOOGLE_CLIENT_EMAIL || !GOOGLE_PRIVATE_KEY || !GOOGLE_SHEET_ID ||
    !LINE_CHANNEL_ACCESS_TOKEN || !LINE_CHANNEL_SECRET || !OPENAI_API_KEY) {
  console.error("[BOOT] Missing some environment variables.");
}

const GOOGLE_PRIVATE_KEY_FIX = GOOGLE_PRIVATE_KEY?.replace(/\\n/g, "\n");


// =============================================================
// 2) Google Sheets / OpenAI / Cache
// =============================================================
const sheets = google.sheets("v4");
const auth = new google.auth.JWT(
  GOOGLE_CLIENT_EMAIL,
  null,
  GOOGLE_PRIVATE_KEY_FIX,
  ["https://www.googleapis.com/auth/spreadsheets"]
);

const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

const cache = {
  products: [],
  promotions: [],
  faq: [],
  personality: null,
  payment: [],
  lastLoadedAt: 0
};

async function loadSheet(range) {
  const res = await sheets.spreadsheets.values.get({
    auth, spreadsheetId: GOOGLE_SHEET_ID, range
  });
  return res.data.values || [];
}

function splitList(s) {
  if (!s) return [];
  return String(s).split(",").map(t=>t.trim()).filter(Boolean);
}

async function ensureDataLoaded(force=false) {
  if (!force && Date.now()-cache.lastLoadedAt < 5*60*1000) return;
  log("Reloading sheets data‚Ä¶");

  const [prod, promos, faq, persona, pay] = await Promise.all([
    loadSheet("Products!A2:G"),
    loadSheet("Promotions!A2:F"),
    loadSheet("FAQ!A2:C"),
    loadSheet("Personality!A2:G"),
    loadSheet("Payment!A2:C")
  ]);

  cache.products = (prod||[]).filter(r=>r[0]).map(r=>({
    code:r[0], name:r[1]||"", category:r[2]||"",
    price:Number(r[3]||0), aliases:splitList(r[4]),
    options:splitList(r[5]), sizes:splitList(r[6])
  }));

  cache.promotions = (promos||[]).filter(r=>r[0]||r[1]).map(r=>({
    code:r[0]||"", detail:r[1]||"", type:(r[2]||"").toLowerCase(),
    condition:r[3]||"", products:splitList(r[4]), categories:splitList(r[5])
  }));

  cache.faq = (faq||[]).filter(r=>r[1]||r[2]).map(r=>({ q:r[0]||"", keyword:r[1]||"", a:r[2]||"" }));

  if (persona?.length) {
    const p = persona[0];
    cache.personality = {
      staffName:p[0]||"‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô",
      pageName:p[1]||"‡πÄ‡∏û‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
      persona:p[2]||"‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á",
      customerName:p[3]||"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      adminSelf:p[4]||"‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
      dontKnow:p[5]||"‡∏Ç‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞",
      gender:p[6]||"‡∏´‡∏ç‡∏¥‡∏á"
    };
  }

  cache.payment = (pay||[]).filter(r=>r[0]||r[1]).map(r=>({
    category:r[0]||"", method:r[1]||"", detail:r[2]||"", qrcode:r[3]||""
  }));

  cache.lastLoadedAt = Date.now();
  log("Sheets reloaded.");
}


// =============================================================
// 3) Helpers (format, NLP, validation)
// =============================================================
const log = (...a)=>console.log("[BOT]",...a);
const nowISO = ()=>new Date().toISOString();
const shortId = ()=>Math.random().toString(36).slice(2,10);
const priceTHB = n => `${Number(n||0).toLocaleString("th-TH")} ‡∏ö‡∏≤‡∏ó`;

const staffPrefix = ()=> cache.personality?.gender === "‡∏´‡∏ç‡∏¥‡∏á" ? "‡∏Ñ‡πà‡∏∞" : "‡∏Ñ‡∏£‡∏±‡∏ö";
const staffName = ()=> cache.personality?.staffName || "‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô";
const pageName  = ()=> cache.personality?.pageName  || "‡πÄ‡∏û‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤";
const customerName = ()=> cache.personality?.customerName || "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
const dontKnow = ()=> cache.personality?.dontKnow || "‡∏Ç‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞";

const normalize = (s)=>String(s||"").trim().toLowerCase();

function parseQuantity(text){
  const t=normalize(text);
  const m=t.match(/(\d+)\s*(‡∏ä‡∏¥‡πâ‡∏ô|‡∏Å‡∏£‡∏∞‡∏õ‡∏∏‡∏Å|‡∏Å‡∏•‡πà‡∏≠‡∏á|‡∏Ñ‡∏±‡∏ô|‡∏Ç‡∏ß‡∏î|‡∏Å‡∏¥‡πÇ‡∏•|‡πÅ‡∏û‡πá‡∏Ñ)?/);
  if (m) return Math.max(1, parseInt(m[1]));
  const map={‡∏´‡∏ô‡∏∂‡πà‡∏á:1,‡∏™‡∏≠‡∏á:2,‡∏™‡∏≤‡∏°:3,‡∏™‡∏µ‡πà:4,‡∏´‡πâ‡∏≤:5,‡∏´‡∏Å:6,‡πÄ‡∏à‡πá‡∏î:7,‡πÅ‡∏õ‡∏î:8,‡πÄ‡∏Å‡πâ‡∏≤:9,‡∏™‡∏¥‡∏ö:10};
  for(const [k,v] of Object.entries(map)) if(t.includes(k)) return v;
  return 1;
}

function parsePhone(text){
  const m=String(text).match(/(\+?\d[\d\s-]{7,15}\d)/);
  return m ? m[1].replace(/\s+/g,"") : "";
}

function parseAddress(text){
  // ‡πÄ‡∏≠‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡πÜ: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡πà‡∏ô ‡∏ï., ‡∏≠., ‡∏à., ‡πÄ‡∏Ç‡∏ï, ‡πÅ‡∏Ç‡∏ß‡∏á, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô address
  const t=String(text);
  if (/(‡∏ï\.|‡∏≠\.|‡∏à\.|‡πÅ‡∏Ç‡∏ß‡∏á|‡πÄ‡∏Ç‡∏ï|‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î|\d{5})/.test(t)) return t.trim();
  return "";
}


// =============================================================
// 4) Retrieval (RAG)
// =============================================================
function retrieveFAQ(text){
  const low=normalize(text);
  return cache.faq.find(f=>f.keyword && low.includes(normalize(f.keyword)));
}

function retrieveProductsByCategory(cat){
  return cache.products.filter(p=>normalize(p.category)===normalize(cat));
}

function retrieveProductCandidates(text){
  const low=normalize(text);
  // ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠, alias, ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥
  const tokens=low.split(/\s+/).filter(Boolean);
  return cache.products.filter(p=>{
    const name=normalize(p.name);
    const alias=p.aliases.map(a=>normalize(a));
    const hitName=tokens.some(tok=>name.includes(tok));
    const hitAlias=tokens.some(tok=>alias.some(a=>a.includes(tok)));
    return hitName || hitAlias;
  });
}


// =============================================================
// 5) Session Memory (RAM + persist to Google Sheets)
// =============================================================
const sessions={};
/*
 session:
 {
   userId, stage, lastCategory, cart: [ {code,name,option,size,qty,price,category} ],
   history: [ {role:'u'|'b', text:'...'} ], note:'', addr:'', phone:''
 }
*/
function getSession(uid){
  if(!sessions[uid]) sessions[uid]={userId:uid,stage:"WELCOME",lastCategory:"",cart:[],history:[],note:"",addr:"",phone:""};
  return sessions[uid];
}
function remember(session, role, text){
  session.history.push({role, text: String(text||"")});
  if (session.history.length>10) session.history.shift();
}
async function persistSession(session){
  try{
    await sheets.spreadsheets.values.append({
      auth, spreadsheetId: GOOGLE_SHEET_ID,
      range:"Sessions!A:F", valueInputOption:"RAW",
      requestBody:{ values:[[
        nowISO(), session.userId, session.stage,
        JSON.stringify(session.cart||[]), JSON.stringify(session.history||[]),
        session.note||""
      ]]}
    });
  }catch(e){ log("persistSession error", e.message); }
}
async function logEvent(userId,type,text){
  try{
    await sheets.spreadsheets.values.append({
      auth, spreadsheetId: GOOGLE_SHEET_ID,
      range:"Logs!A:D", valueInputOption:"RAW",
      requestBody:{ values:[[nowISO(), userId, type, String(text||"")]] }
    });
  }catch(e){ log("logEvent error", e.message); }
}


// =============================================================
// 6) Sales Flow State Machine
//    WELCOME ‚Üí BROWSING ‚Üí CART ‚Üí DETAILS (addr, phone) ‚Üí CONFIRM
// =============================================================
function addToCart(session, product, qty=1, option="", size=""){
  if(!product) return;
  const existed=session.cart.find(c=>c.code===product.code&&c.option===option&&c.size===size);
  if(existed) existed.qty+=qty;
  else session.cart.push({ code:product.code,name:product.name,option,size,qty,
                           price:Number(product.price||0),category:product.category });
}
function cartTotal(session){ return (session.cart||[]).reduce((s,c)=>s+c.price*c.qty,0); }
function cartSummary(session){
  if (!session.cart?.length) return `‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà${staffPrefix()} üõí`;
  const lines=session.cart.map(c=>`‚Ä¢ ${c.name}${c.size?` ${c.size}`:""} x${c.qty} = ${priceTHB(c.price*c.qty)}`);
  return `‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ñ‡πà‡∏∞:\n${lines.join("\n")}\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${priceTHB(cartTotal(session))}`;
}
function paymentText(){
  if (!cache.payment.length) return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏Ñ‡πà‡∏∞";
  return cache.payment.map(p=>`‚Ä¢ ${p.category}: ${p.method} (${p.detail})`).join("\n");
}


// =============================================================
// 7) Promotion Engine (rule-based ‡∏™‡∏±‡πâ‡∏ô‡πÜ)
// =============================================================
function applyPromotions(session){
  const promos=[];
  for(const promo of cache.promotions){
    // ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ match
    if (promo.categories?.length && session.cart.some(c=>promo.categories.includes(c.category))) {
      promos.push(promo.detail);
    }
    // ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á
    if (promo.products?.length && session.cart.some(c=>promo.products.includes(c.code))) {
      promos.push(promo.detail);
    }
  }
  return Array.from(new Set(promos));
}
const promotionSummary = session => {
  const p=applyPromotions(session);
  return p.length ? `‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n${p.map(x=>"‚Ä¢ "+x).join("\n")}` : "";
};


// =============================================================
// 8) Orders & Admin notify
// =============================================================
async function saveOrder(session,nameAddr="",phone=""){
  const orderId="ORD-"+shortId();
  const rows=(session.cart||[]).map(c=>[
    orderId, c.code, c.name, c.option, c.qty, c.price*c.qty,
    promotionSummary(session), nameAddr, phone, "‡πÉ‡∏´‡∏°‡πà"
  ]);
  if(!rows.length) return orderId;

  await sheets.spreadsheets.values.append({
    auth, spreadsheetId: GOOGLE_SHEET_ID, range:"Orders!A:J",
    valueInputOption:"RAW", requestBody:{ values: rows }
  });
  return orderId;
}
async function notifyAdmin(orderId, session){
  if (!ADMIN_GROUP_ID) return;
  const lines=session.cart.map(c=>`‚Ä¢ ${c.name}${c.size?` ${c.size}`:""} x${c.qty} = ${priceTHB(c.price*c.qty)}`);
  const total=priceTHB(cartTotal(session));
  await linePush(ADMIN_GROUP_ID, [
    { type:"text", text:`üõí ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà ${orderId}` },
    { type:"text", text:`${lines.join("\n")}\n‡∏£‡∏ß‡∏° ${total}\n${promotionSummary(session)}` }
  ]);
}


// =============================================================
// 9) LINE API + OpenAI rewrite
// =============================================================
async function lineReply(replyToken,messages){
  const url="https://api.line.me/v2/bot/message/reply";
  const res=await fetch(url,{
    method:"POST",
    headers:{"Content-Type":"application/json","Authorization":`Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`},
    body:JSON.stringify({replyToken,messages})
  });
  if(!res.ok) log("LINE reply error", res.status, await res.text());
}
async function linePush(to,messages){
  const url="https://api.line.me/v2/bot/message/push";
  const res=await fetch(url,{
    method:"POST",
    headers:{"Content-Type":"application/json","Authorization":`Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`},
    body:JSON.stringify({to,messages})
  });
  if(!res.ok) log("LINE push error", res.status, await res.text());
}
const makeReply=(text,quick=[])=>{
  const msg={type:"text",text:String(text||"")};
  if(quick.length){
    msg.quickReply={items:quick.map(label=>({type:"action",action:{type:"message",label,text:label}}))};
  }
  return msg;
};
function verifySignature(signature, bodyBuffer){
  const h=crypto.createHmac("SHA256",LINE_CHANNEL_SECRET).update(bodyBuffer).digest("base64");
  return signature===h;
}

// STRICT rewriter (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡πà‡∏á/‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
async function rewriteWithAI(structuredMsg, ragContext="", session=null){
  try{
    const history = (session?.history||[]).slice(-4).map(h=>{
      const role = h.role==="u"?"user":"assistant";
      return { role, content:h.text };
    });

    const system = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ "${staffName()}" ‡∏à‡∏≤‡∏Å "${pageName()}" 
‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: ${cache.personality?.persona}
‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å:
- ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
- ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠ 1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à`;

    const user = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó (RAG):
${ragContext || "-‡πÑ‡∏°‡πà‡∏°‡∏µ-"}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô:
${structuredMsg}`;

    const resp=await openai.chat.completions.create({
      model:"gpt-4o-mini",
      temperature:0.4, max_tokens:180,
      messages: [
        { role:"system", content: system },
        ...history,
        { role:"user", content: user }
      ]
    });
    return (resp.choices?.[0]?.message?.content||structuredMsg).trim();
  }catch(e){
    log("rewrite error:", e.message);
    return structuredMsg;
  }
}


// =============================================================
// 10) Intent detection + Handlers per state
// =============================================================
function detectIntent(text){
  const low=normalize(text);
  if (/(‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|hello|hi)/.test(low)) return {type:"greet"};
  if (/(‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£|‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∏‡∏¢|‡πÉ‡∏Ñ‡∏£‡∏ï‡∏≠‡∏ö)/.test(low)) return {type:"ask_name"};
  if (/(‡πÄ‡∏û‡∏à‡∏≠‡∏∞‡πÑ‡∏£|‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à)/.test(low)) return {type:"ask_page"};
  if (/‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞|‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô|‡πÇ‡∏≠‡∏ô|‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå|qr|‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå|‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå/.test(low)) return {type:"checkout"};
  if (/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô|‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°|‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢|‡∏ï‡∏Å‡∏•‡∏á/.test(low)) return {type:"confirm"};
  if (/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å|‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤/.test(low)) return {type:"cancel"};
  if (/‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà|‡∏à‡∏±‡∏î‡∏™‡πà‡∏á|‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á|‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà/.test(low)) return {type:"provide_addr"};
  if (/‡πÄ‡∏ö‡∏≠‡∏£‡πå|‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠|‡πÇ‡∏ó‡∏£/.test(low)) return {type:"provide_phone"};
  if (/‡πÇ‡∏õ‡∏£|‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î|‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°/.test(low)) return {type:"ask_promo"};
  if (/‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å/.test(low)) return {type:"browse", category:"‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å"};
  if (/‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô/.test(low)) return {type:"browse", category:"‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î"};
  const f=retrieveFAQ(text); if(f) return {type:"faq",answer:f.a};
  // default: treat as add-to-cart try
  return {type:"free_text"};
}

async function handleMessage(userId, replyToken, text){
  await ensureDataLoaded();
  const s = getSession(userId);
  remember(s,"u",text);
  await logEvent(userId,"in",text);

  const intent = detectIntent(text);
  let structured="", rag="", quick=[], finalText="";
  let nextStage = s.stage;

  // ===== Global commands that override stage =====
  if (intent.type==="ask_name"){
    structured=`‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${staffName()} ‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à ${pageName()}`;
    nextStage = s.stage || "WELCOME";
    finalText = structured;
  }
  else if (intent.type==="ask_page"){
    structured=`‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ "${pageName()}" ${staffPrefix()}`;
    nextStage = s.stage || "WELCOME";
    finalText = structured;
  }
  else if (intent.type==="faq"){
    structured=intent.answer;
    nextStage = s.stage || "WELCOME";
    finalText = structured;
  }
  else {
    // ===== State-based =====
    switch(s.stage){
      case "WELCOME":
      default: {
        if (intent.type==="greet"){
          structured = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ${staffPrefix()} ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö${staffName()}‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à ${pageName()} ‡∏™‡∏ô‡πÉ‡∏à‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞ ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î`;
          quick = ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
          nextStage = "BROWSING";
          break;
        }
        // goto browsing if user names category
        if (intent.type==="browse"){
          s.lastCategory = intent.category;
          const items = retrieveProductsByCategory(intent.category);
          if (items.length){
            rag = items.map(p=>`${p.name}${p.sizes.length?` (${p.sizes.join("/")})`:""} = ${priceTHB(p.price)}`).join("\n");
            structured = `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${intent.category} (‡∏î‡∏π context)`;
            quick = items.slice(0,3).map(p=>p.name).concat(["‡∏î‡∏π‡πÇ‡∏õ‡∏£","‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"]);
            nextStage = "BROWSING";
          } else {
            structured = `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${intent.category}`;
            nextStage = "WELCOME";
          }
          break;
        }
        // free text: try candidates & add to cart
        if (intent.type==="free_text"){
          let cands = retrieveProductCandidates(text);
          if (!cands.length && s.lastCategory) cands = retrieveProductsByCategory(s.lastCategory);
          if (cands.length){
            const p = cands[0];
            const qty = parseQuantity(text);
            addToCart(s, p, qty, "", p.sizes[0]||"");
            structured = `‡πÄ‡∏û‡∏¥‡πà‡∏° ${p.name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${qty} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`;
            rag = `${p.name} = ${priceTHB(p.price)}`;
            quick = ["‡∏î‡∏π‡πÇ‡∏õ‡∏£","‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå","‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"];
            nextStage = "CART";
          } else {
            structured = `${dontKnow()} ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ 2 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å: ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞ ‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞`;
            quick = ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
            nextStage = "WELCOME";
          }
          break;
        }
        if (intent.type==="checkout"){
          structured = `${cartSummary(s)}\n${promotionSummary(s)}\n\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:\n${paymentText()}\n\n‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠-‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞`;
          quick = ["‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà","‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå","‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"];
          nextStage = "DETAILS";
          break;
        }
        // other
        structured = `${dontKnow()} ‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢‡πÑ‡∏´‡∏°${staffPrefix()} ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÑ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î`;
        quick = ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"];
        nextStage = "WELCOME";
      }
    }
  }

  // ===== Separate handlers for some explicit intents (works in any stage) =====
  if (intent.type==="ask_promo"){
    structured = promotionSummary(s) || "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ñ‡πà‡∏∞";
    nextStage = s.stage || "CART";
    finalText = structured;
  }
  if (intent.type==="checkout"){
    structured = `${cartSummary(s)}\n${promotionSummary(s)}\n\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:\n${paymentText()}\n\n‡∏´‡∏≤‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠-‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞`;
    quick = ["‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà","‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå","‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"];
    nextStage = "DETAILS";
    finalText = structured;
  }
  if (intent.type==="provide_phone"){
    const phone = parsePhone(text);
    if (phone){
      s.phone = phone;
      structured = `‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ç‡∏≠‡∏ä‡∏∑‡πà‡∏≠-‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞`;
      quick = ["‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà","‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"];
      nextStage = "DETAILS";
      finalText = structured;
    }
  }
  if (intent.type==="provide_addr"){
    const addr = parseAddress(text);
    if (addr){
      s.addr = addr;
      structured = `‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ ‚úÖ\n‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
      quick = ["‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"];
      nextStage = "CONFIRM";
      finalText = structured;
    }
  }
  if (intent.type==="confirm"){
    if (!s.cart.length){
      structured = `‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà${staffPrefix()} ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞`;
      nextStage = "BROWSING";
      finalText = structured;
    } else if (!s.addr || !s.phone){
      structured = `‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞`;
      quick = ["‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà","‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå"];
      nextStage = "DETAILS";
      finalText = structured;
    } else {
      const orderId = await saveOrder(s, s.addr, s.phone);
      await notifyAdmin(orderId, s);
      structured = `‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${orderId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ üéâ\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ${priceTHB(cartTotal(s))}\n${promotionSummary(s)}\n\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:\n${paymentText()}\n‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞`;
      nextStage = "WELCOME";
      s.cart = []; // clear cart after order issued
      finalText = structured;
    }
  }
  if (intent.type==="cancel"){
    s.cart = [];
    structured = `‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß${staffPrefix()} ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
    nextStage = "WELCOME";
    finalText = structured;
  }

  // ===== Build final text (Hybrid: ‡∏ö‡∏≤‡∏á‡πÄ‡∏Ñ‡∏™‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GPT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏ß/‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ß) =====
  const noAI = (
    intent.type==="ask_name" ||
    intent.type==="ask_page" ||
    intent.type==="faq" ||
    intent.type==="checkout" ||
    intent.type==="provide_phone" ||
    intent.type==="provide_addr" ||
    intent.type==="confirm" ||
    intent.type==="cancel"
  );

  if (!finalText){
    if (noAI) {
      finalText = structured;
    } else {
      finalText = await rewriteWithAI(structured, rag, s);
    }
  }

  // ===== Send & persist =====
  s.stage = nextStage;
  remember(s,"b",finalText);
  await lineReply(replyToken, [ makeReply(finalText, quick) ]);
  await persistSession(s);
  await logEvent(userId,"out",finalText);
}


// =============================================================
// 11) Express endpoints
// =============================================================
const app = express();

// raw body for /webhook
app.use("/webhook", bodyParser.raw({ type:"*/*" }));
app.use(bodyParser.json());

app.get("/healthz", (req,res)=> res.json({ ok:true, ts: Date.now() }));

app.post("/reload", async (req,res)=>{
  try{
    await ensureDataLoaded(true);
    res.json({ reloadedAt: cache.lastLoadedAt, staff: staffName() });
  }catch(e){ res.status(500).json({ error:e.message }); }
});

app.get("/debug", async (req,res)=>{
  try{
    await ensureDataLoaded();
    res.json({
      personality: cache.personality,
      productsSample: cache.products.slice(0,5),
      payments: cache.payment,
      promosSample: cache.promotions.slice(0,3),
      faqSample: cache.faq.slice(0,3),
      lastLoadedAt: cache.lastLoadedAt
    });
  }catch(e){ res.status(500).json({ error:e.message }); }
});

app.post("/webhook", async (req,res)=>{
  const sig=req.headers["x-line-signature"];
  if (!verifySignature(sig, req.body)) return res.status(400).send("Bad signature");
  const body=JSON.parse(req.body.toString("utf8"));
  res.sendStatus(200);

  for (const ev of (body.events||[])) {
    try{
      if (ev.type==="message" && ev.message?.type==="text") {
        await handleMessage(ev.source.userId, ev.replyToken, ev.message.text);
      } else {
        await lineReply(ev.replyToken, [ makeReply(`‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£${staffPrefix()}`, ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô","‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå"]) ]);
      }
    }catch(e){
      log("event error", e.message);
      try {
        await lineReply(ev.replyToken, [ makeReply(`${dontKnow()} ‡∏´‡∏≤‡∏Å‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢${staffPrefix()}`, ["‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å","‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô"]) ]);
      } catch {}
    }
  }
});


// =============================================================
// 12) Bootstrap
// =============================================================
const port = PORT || 3000;
app.listen(port, async ()=>{
  log(`üöÄ Server running on port ${port}`);
  try{
    await ensureDataLoaded(true);
  }catch(e){ log("initial load error:", e.message); }
  // ‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏Å‡∏≤‡∏£ call ‡∏ä‡∏µ‡∏ó‡∏ö‡πà‡∏≠‡∏¢)
  setInterval(()=> ensureDataLoaded(true), 5*60*1000);
});
